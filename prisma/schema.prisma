generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  confirmed
  done
  failed
  await
}

model Movie {
  id                Int      @id @default(autoincrement())
  title             String
  slug              String    @unique
  description       String
  release           DateTime
  endDate           DateTime
  genres            String[] @default([])
  cast              String[] @default([])   // List of actors separated by commas
  director          String
  duration          Int      // Duration in minutes
  poster            String   // URL of the movie poster image
  trailer           String?   // URL of the movie trailer
  price             Float    @default(10.0) // Price per ticket
  tickets           Ticket[] // Relation with the Ticket model
}

model User {
  id        String   @id @unique  // Kinde's unique ID used as the primary key
  email     String   @unique      // Email provided by Kinde
  name      String?               // Optional name from Kinde
  createdAt DateTime @default(now())  // Auto-generated creation time
  tickets   Ticket[]              // One-to-many relation with Ticket
}


model Ticket {
  id        Int      @id @default(autoincrement())
  date      DateTime           // The date the ticket was booked or used
  time      DateTime           // Time of the movie or ticket booking
  status    OrderStatus @default(await)             // For example, 'reserved', 'paid', etc.
  seats     String[]           // List of seat numbers like ["1A", "2B", "3C"]
  movie     Movie    @relation(fields: [movieId], references: [id]) // Links the ticket to a movie
  movieId   Int                // Foreign key for Movie
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String                // Foreign key for User
  createdAt DateTime @default(now()) // Stores when the ticket was created
}

